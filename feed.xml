<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://donggeuldunggeul.github.io//</id><title>동글둥글 DonggeulDunggeul</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2023-02-21T22:44:14+09:00</updated> <author> <name></name> <uri>https://donggeuldunggeul.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://donggeuldunggeul.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://donggeuldunggeul.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[Java] 문자열(String)을 비교하는 방법 (==, equals, compare)</title><link href="https://donggeuldunggeul.github.io//posts/Java_%EB%AC%B8%EC%9E%90%EC%97%B4(String)_%EB%B9%84%EA%B5%90%ED%95%98%EB%8A%94_%EB%B0%A9%EB%B2%95/" rel="alternate" type="text/html" title="[Java] 문자열(String)을 비교하는 방법 (==, equals, compare)" /><published>2022-08-25T00:00:00+09:00</published> <updated>2022-08-25T00:00:00+09:00</updated> <id>https://donggeuldunggeul.github.io//posts/Java_%EB%AC%B8%EC%9E%90%EC%97%B4(String)_%EB%B9%84%EA%B5%90%ED%95%98%EB%8A%94_%EB%B0%A9%EB%B2%95/</id> <content src="https://donggeuldunggeul.github.io//posts/Java_%EB%AC%B8%EC%9E%90%EC%97%B4(String)_%EB%B9%84%EA%B5%90%ED%95%98%EB%8A%94_%EB%B0%A9%EB%B2%95/" /> <author> <name>둥글</name> </author> <category term="Java" /> <summary> 1. Java 에서는 == 가 아닌, equals를 사용하여 문자열이 동일한지 확인합니다. 다른 언어와는 달리 == 로 확인하지 않습니다. == 는 object 가 동일한지를 체크한다. 그렇기 때문에 해당 object가 갖고 있는 문자열이 동일하다는 것을 보장할 수 없기 떄문입니다. compare 매소드를 통해서도 문자열을 비교할 수 있습니다. equals() 는 모든 객체의 부모 클래스인 Object 에 정의되어있는 매소드입니다. public boolean equals(Object anObject) { if (this == anObject) { return true; } if (anObject insta... </summary> </entry> <entry><title>[AWS] Amazon SES - 2022년 바뀐 UI위에서</title><link href="https://donggeuldunggeul.github.io//posts/AWS-SES(Simple_Email_Service)/" rel="alternate" type="text/html" title="[AWS] Amazon SES - 2022년 바뀐 UI위에서" /><published>2022-08-24T00:00:00+09:00</published> <updated>2022-08-24T00:00:00+09:00</updated> <id>https://donggeuldunggeul.github.io//posts/AWS-SES(Simple_Email_Service)/</id> <content src="https://donggeuldunggeul.github.io//posts/AWS-SES(Simple_Email_Service)/" /> <author> <name>둥글</name> </author> <category term="AWS" /> <summary> Amazon SES - 2022년 바뀐 UI위에서 SES란? Simple_Email_Service 로서 메일을 자동으로 보내주는 AWS 서비스이다. API 를 통해 Email 을 자동으로 보낼 때 편리하듯 하다. 구축하면서 부딪힌 점 SES를 설정할 일이 생겨 구축 중에 서칭 및 인수인계 자료를 통해 마주치다 많이 바뀐 환경이라 당황스러웠다. 막상 다른 UI 를 마주치니, 구성되는 요소들을 이해하여 어떻게 적용해야 하는지 공부하는 시간을 가졌어야 했다. 결국 SES 는 메일을 전송해주는 서비스인데, 필요한점은 Domain 과 email 주소 ( ID@Domain ) 이며, Domain 과 ID 두... </summary> </entry> <entry><title>[용어정리] SQL VS ORM</title><link href="https://donggeuldunggeul.github.io//posts/SQL_VS_ORM/" rel="alternate" type="text/html" title="[용어정리] SQL VS ORM" /><published>2022-08-22T00:00:00+09:00</published> <updated>2022-08-22T00:00:00+09:00</updated> <id>https://donggeuldunggeul.github.io//posts/SQL_VS_ORM/</id> <content src="https://donggeuldunggeul.github.io//posts/SQL_VS_ORM/" /> <author> <name>동글</name> </author> <category term="용어정리" /> <summary> SQL(Query) vs ORM(Object Relational Mapping) 1.SQL(Query) SQL(Structured Query Language)은 관계형 데이터베이스의 기능을 활용하도록 설계된 언어 1.1 장점 SQL을 사용하면 데이터베이스에 액세스하기 위해 타사 코드에 의존하지 않으므로 공급업체에 종속될 가능성이 없다. (DB에 종속성) SQL을 사용하면 개발자가 기본 데이터베이스에서 무슨 일이 일어나고 있는지 정확히 볼 수 있으므로 ORM을 사용할 때보다 복잡한 문제를 쉽게 해결할 수 있다. (직관적) 1.2 단점 SQL의 잠재력을 최대한 활용하려면 잘못 입력하기 쉬운 복잡한 SQL 문을 작성해야 하므로 잠재력을 최대한 발휘할 수 있을 만큼 SQL에 능숙해져... </summary> </entry> <entry><title>[Java] Java 입문 - 클래스</title><link href="https://donggeuldunggeul.github.io//posts/Java%EC%9E%85%EB%AC%B8_%ED%81%B4%EB%9E%98%EC%8A%A4/" rel="alternate" type="text/html" title="[Java] Java 입문 - 클래스" /><published>2022-08-22T00:00:00+09:00</published> <updated>2022-08-22T00:00:00+09:00</updated> <id>https://donggeuldunggeul.github.io//posts/Java%EC%9E%85%EB%AC%B8_%ED%81%B4%EB%9E%98%EC%8A%A4/</id> <content src="https://donggeuldunggeul.github.io//posts/Java%EC%9E%85%EB%AC%B8_%ED%81%B4%EB%9E%98%EC%8A%A4/" /> <author> <name>동글</name> </author> <category term="Java" /> <summary> 강의 링크 : 자바 입문 JAVA 입문 - 클래스 Java는 객체지향 언어로 프로그램을 구성하는 요소들을 객체로 보고 객체간에 상호작용 하도록 하는것은 객체지향 프로그래밍 이라 합니다. Java는 객체를 만들기위해 클래스를 먼저 만들어야 합니다. 클래스 선언 public class 클래스명{ // ...... // 클래스 블록 } // 이처럼 생성한 클래스는 “붕어빵 틀”과 같고, 이것을 이용하여 만든 객체는 “붕어빵”과 같다.   Car.java package javaStudy; public class Car { } CarExam.java pa... </summary> </entry> <entry><title>[Reference &amp; Error] Grafana logout API(Python)</title><link href="https://donggeuldunggeul.github.io//posts/grafana_logout_api_python/" rel="alternate" type="text/html" title="[Reference &amp; Error] Grafana logout API(Python)" /><published>2022-08-20T00:00:00+09:00</published> <updated>2022-08-20T00:00:00+09:00</updated> <id>https://donggeuldunggeul.github.io//posts/grafana_logout_api_python/</id> <content src="https://donggeuldunggeul.github.io//posts/grafana_logout_api_python/" /> <author> <name>동글</name> </author> <category term="Reference &amp; Error" /> <summary> 참고 Post : Keycloak backchannel logout 1. Reference Grafana 로그아웃 admin계정 ID:PW base64 Encode #admin:admin - default YWRtaW46YWRtaW4= Grafana사용자 목록 API를 이용하여 원하는 사용자의 번호를 얻는다 참고 링크: https://grafana.com/docs/grafana/latest/developers/http_api/user/#search-users url = "{gf_url}/api/users" headers = {'Content-Type': 'application/json; charset=utf-8', 'Accept':'appli... </summary> </entry> </feed>
